{"version":3,"sources":["store/slices/button.js","store/slices/index.js","store/index.js","components/Button.js","components/Layout.js","containers/App.js","reportWebVitals.js","index.js"],"names":["buttonSlice","createSlice","name","initialState","isActive","error","reducers","getButtonStateSuccess","state","payload","getButtonStateFailure","actions","buttonStateSelector","button","buttonErrorSelector","rootReducer","combineReducers","buttonReducer","store","configureStore","reducer","devTools","process","StyledButton","styled","btnActive","Button","onClickHandler","disabled","onClick","defaultProps","propTypes","PropTypes","bool","func","isRequired","StyledLayout","div","Layout","children","socket","io","connect","subscribeOnButtonState","dispatch","on","data","emit","useEffect","removeAllListeners","event","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAEMA,EAAcC,YAAY,CAC9BC,KAAM,SACNC,aAAc,CACZC,UAAU,EACVC,OAAO,GAETC,SAAU,CACRC,sBAAuB,SAACC,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QAC/BD,EAAMJ,SAAWK,EACjBD,EAAMH,OAAQ,GAEhBK,sBAAuB,SAAAF,GACrBA,EAAMH,OAAQ,M,EAQhBL,EAAYW,QAFdJ,E,EAAAA,sBACAG,E,EAAAA,sBAGaV,IAAf,QAYaY,EAAsB,SAAAJ,GACjC,OAAOA,EAAMK,OAAOT,UAGTU,EAAsB,SAAAN,GACjC,OAAOA,EAAMK,OAAOR,OClCPU,EAJKC,YAAgB,CAClCH,OAAQI,ICIKC,EALDC,YAAe,CAC3BC,QAASL,EACTM,UAAUC,I,6kBCDZ,IAAMC,EAAeC,IAAOX,OAAV,KAMI,qBAAGY,UAA6B,UAAY,aAY1C,qBAAGA,UAA6B,UAAY,aAS9DC,EAAS,SAAC,GAAD,IAAGD,EAAH,EAAGA,UAAWE,EAAd,EAAcA,eAAgBC,EAA9B,EAA8BA,SAA9B,OACb,cAACL,EAAD,CACEE,UAAWA,EACXI,QAASF,EACTC,SAAUA,EAHZ,SAKGH,EAAY,KAAO,SAIxBC,EAAOI,aAAe,CACpBL,WAAW,EACXE,eAAgB,aAChBC,UAAU,GASZL,EAAaQ,UAAY,CACvBN,UAAWO,IAAUC,KACrBJ,QAASG,IAAUE,KAAKC,WACxBP,SAAUI,IAAUC,MAGPP,Q,2NCvDf,IAAMU,EAAeZ,IAAOa,IAAV,KAgBHC,EANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,cAACH,EAAD,UAAeG,KCF1CC,EAASC,IAAG,KAuCHC,eAPS,SAAAlC,GACtB,MAAO,CACLJ,SAAUQ,EAAoBJ,GAC9BH,MAAOS,EAAoBN,MAIS,CACtCmC,uBL1BoC,SAAAH,GAAM,OAAI,SAAAI,GAC1CJ,GACFA,EAAOK,GAAG,aAAa,SAAAC,GAAI,OAAIF,EAASrC,EAAsBuC,OAC9DN,EAAOK,GAAG,iBAAiB,kBAAMD,EAASlC,QAC1C8B,EAAOO,KAAK,mBAEZH,EAASlC,QKmBEgC,EArCH,SAAC,GAAiD,IAA/CtC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,MAAOsC,EAA6B,EAA7BA,uBAC9BK,qBAAU,WAER,OADAL,EAAuBH,GAChB,WACDA,GAAQA,EAAOS,wBAEpB,CAACN,IAOJ,OACE,cAAC,EAAD,UACE,cAAC,EAAD,CACElB,UAAWrB,EACXuB,eATgB,SAAAuB,GACpBA,EAAMC,iBACNX,EAAOO,KAAK,iBAQRnB,SAAUvB,SCpBH+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU7C,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ8C,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dcf01bd8.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst buttonSlice = createSlice({\n  name: 'button',\n  initialState: {\n    isActive: false,\n    error: false,\n  },\n  reducers: {\n    getButtonStateSuccess: (state, { payload }) => {\n      state.isActive = payload\n      state.error = false\n    },\n    getButtonStateFailure: state => {\n      state.error = true\n    },\n  },\n})\n\nexport const {\n  getButtonStateSuccess,\n  getButtonStateFailure,\n} = buttonSlice.actions\n\nexport default buttonSlice.reducer\n\nexport const subscribeOnButtonState = socket => dispatch => {\n  if (socket) {\n    socket.on('set-state', data => dispatch(getButtonStateSuccess(data)))\n    socket.on('connect_error', () => dispatch(getButtonStateFailure()))\n    socket.emit('new-connection')\n  } else {\n    dispatch(getButtonStateFailure())\n  }\n}\n\nexport const buttonStateSelector = state => {\n  return state.button.isActive\n}\n\nexport const buttonErrorSelector = state => {\n  return state.button.error\n}\n","import { combineReducers } from '@reduxjs/toolkit'\nimport buttonReducer from './button'\n\nconst rootReducer = combineReducers({\n  button: buttonReducer,\n})\n\nexport default rootReducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport rootReducer from './slices'\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: process.env.NODE_ENV !== 'production',\n})\n\nexport default store\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst StyledButton = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #fff;\n  font-size: 2rem;\n  background-color: ${({ btnActive }) => (btnActive ? '#fe7968' : '#ffbdb3')};\n  box-shadow: 0px 0px 28px 4px rgba(0, 0, 0, 0.2);\n  height: 150px;\n  width: 150px;\n  margin: 1rem;\n  padding: 0;\n  border: 2px solid #a83b24;\n  border-radius: 50%;\n  cursor: pointer;\n\n  :not([disabled]):hover {\n    color: #fff;\n    background-color: ${({ btnActive }) => (btnActive ? '#ec4f43' : '#fe948d')};\n  }\n\n  :disabled {\n    opacity: 0.3;\n    cursor: default;\n  }\n`\n\nconst Button = ({ btnActive, onClickHandler, disabled }) => (\n  <StyledButton\n    btnActive={btnActive}\n    onClick={onClickHandler}\n    disabled={disabled}\n  >\n    {btnActive ? 'On' : 'Off'}\n  </StyledButton>\n)\n\nButton.defaultProps = {\n  btnActive: false,\n  onClickHandler: () => {},\n  disabled: false,\n}\n\nButton.propTypes = {\n  btnActive: PropTypes.bool,\n  onClickHandler: PropTypes.func,\n  disabled: PropTypes.bool,\n}\n\nStyledButton.propTypes = {\n  btnActive: PropTypes.bool,\n  onClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n}\n\nexport default Button\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst StyledLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100vh;\n  margin: 0;\n  background-color: #f8f9fa;\n`\n\nconst Layout = ({ children }) => <StyledLayout>{children}</StyledLayout>\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React, { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport io from 'socket.io-client'\nimport Button from '../components/Button'\nimport Layout from '../components/Layout'\nimport {\n  buttonStateSelector,\n  buttonErrorSelector,\n  subscribeOnButtonState,\n} from '../store/slices/button'\n\nconst socket = io('/')\n\nconst App = ({ isActive, error, subscribeOnButtonState }) => {\n  useEffect(() => {\n    subscribeOnButtonState(socket)\n    return () => {\n      if (socket) socket.removeAllListeners()\n    }\n  }, [subscribeOnButtonState])\n\n  const toggleHandler = event => {\n    event.preventDefault()\n    socket.emit('toggle-state')\n  }\n\n  return (\n    <Layout>\n      <Button\n        btnActive={isActive}\n        onClickHandler={toggleHandler}\n        disabled={error}\n      />\n    </Layout>\n  )\n}\n\nApp.propTypes = {\n  isActive: PropTypes.bool.isRequired,\n  error: PropTypes.bool.isRequired,\n  subscribeOnButtonState: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => {\n  return {\n    isActive: buttonStateSelector(state),\n    error: buttonErrorSelector(state),\n  }\n}\n\nexport default connect(mapStateToProps, {\n  subscribeOnButtonState,\n})(App)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}